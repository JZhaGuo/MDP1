library(knitr)
knitr::opts_chunk$set(echo = TRUE)
beisbol = read.csv("beisbol.csv", row.names = 1, as.is = TRUE)
summary(beisbol)
tabla = data.frame("variable" = colnames(beisbol),"tipo" = c(rep("numerical", 19),
rep("binary", 6)), stringsAsFactors = FALSE)
rownames(tabla) = tabla$variable
library(FactoMineR)
library(factoextra)
res.pca = PCA(beisbol, scale.unit = TRUE, graph = FALSE, ncp = 19,
quali.sup = which(tabla$tipo == "binary"),
quanti.sup = 17:19)
# quali.sup - variables suplementarias cualitativas, quanti.sup - variables auxiliares cuantitativas
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:6,])
K=3
K = 3
res.pca = PCA(beisbol, scale.unit = TRUE, graph = FALSE, ncp = K,
quali.sup = which(tabla$tipo == "binary"),
quanti.sup = 17:19)
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:6,])
# Gráfico T2 Hotelling
misScores = res.pca$ind$coord[,1:K]
miT2 = colSums(t(misScores**2) / eig.val[1:K,1])
I = nrow(beisbol)
F95 = K*(I**2 - 1)/(I*(I - K)) * qf(0.95, K, I-K)
F99 = K*(I**2 - 1)/(I*(I - K)) * qf(0.99, K, I-K)
plot(1:length(miT2), miT2, type = "l", xlab = "Jugadores", ylab = "T2")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
anomalas = which(miT2 > F95)
anomalas
# Score plots
library(grid)
library(gridExtra)
p1 = fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point"), habillage = factor(miT2 > F95))
p2 = fviz_pca_ind(res.pca, axes = c(1,3), geom = c("point"), habillage = factor(miT2 > F95))
grid.arrange(p1,p2, nrow = 1)
contribT2 = function (X, scores, loadings, eigenval, observ, cutoff = 2) {
# X is data matrix and must be centered (or centered and scaled if data were scaled)
misScoresNorm = t(t(scores**2) / eigenval)
misContrib = NULL
for (oo in observ) {
print(rownames(misScores)[oo])
print(misScores[oo,])
misPCs = which(as.numeric(misScoresNorm[oo,]) > cutoff)
lacontri = sapply(misPCs, function (cc) (misScores[oo,cc]/eigenval[cc])*loadings[,cc]*X[oo,])
lacontri = rowSums((1*(sign(lacontri) == 1))*lacontri)
misContrib = cbind(misContrib, lacontri)
}
colnames(misContrib) = rownames(misScoresNorm[observ,])
return(misContrib)
}
# Recuperamos los datos utilizados en el modelo PCA, centrados y escalados
beisbolCE = beisbol[,tabla$tipo == "numerical"]
beisbolCE = beisbolCE[,setdiff(colnames(beisbolCE), c("Salary", "Weight", "Height"))]
beisbolCE = scale(beisbolCE, center = TRUE, scale = TRUE)
X = as.matrix(beisbolCE)
# Calculamos los loadings a partir de las coordenadas de las variables
# ya que la librería FactoMineR nos devuelve los loadings ponderados
# por la importancia de cada componente principal.
misLoadings = sweep(res.pca$var$coord, 2, sqrt(res.pca$eig[1:K,1]), FUN="/")
# Calculamos las contribuciones
mycontrisT2 = contribT2(X = X, scores = misScores, loadings = misLoadings,
eigenval = eig.val[1:K,1], observ = which.max(miT2),
cutoff = 2)
par(mar = c(10,2.3,3,1))
barplot(mycontrisT2[,1],las=2, #cex.names = 0.5,
main= paste0("Observación: ", rownames(beisbol)[which.max(miT2)]))
myE = X - misScores %*% t(misLoadings)
mySCR = rowSums(myE^2)
plot(1:length(mySCR), mySCR, type = "l", main = "Distancia al modelo",
ylab = "SCR", xlab = "Jugadores", ylim = c(0,11))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim, col = "orange", lty = 2, lwd = 2)
abline(h = chi2lim99, col = "red3", lty = 2, lwd = 2)
## Función para calcular las contribuciones a la SCR
ContriSCR = function(E, SCR) {
# E es la matriz de residuos del modelo
# SCR es la suma de cuadrados residual
contribucion = NULL
for (j in 1:length(SCR)){
eind<-E[j,]
signo<-sign(eind)
contri<-(signo*(eind^2)/SCR[j])*100
contribucion<-rbind(contribucion,contri)
}
rownames(contribucion) = rownames(E)
return(contribucion)
}
## Calculamos las contribuciones de todas las observaciones
mycontris = ContriSCR(E = myE, SCR = mySCR)
## Gráfico para Special_K
barplot(mycontris["Pete Rose",],las=2, cex.names = 0.7,
main=c('Contribuciones a SCR para Pete Rose'))
fviz_pca_var(res.pca, axes = c(1,2), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_var(res.pca, axes = c(1,3), repel = TRUE, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
par(usr = c(0, 1, 0, 1))
r <- cor(x, y)
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * abs(r))
}
pairs(beisbol[,c("CAtBat" , "CHits", "CHmRun", "CRuns", "CRBI", "CWalks", "Years")],
lower.panel = panel.cor, pch = 20, col = "red3")
fviz_contrib(res.pca, choice = "var", axes = 1)
loadings_2pc <- misLoadings[, 1:2]
plot(loadings_2pc[,1], loadings_2pc[,2],
xlab = "Componente Principal 1", ylab = "Componente Principal 2",
main = "Gráfico de Loadings",
xlim = c(-0.5, 0.5),
ylim = c(-0.5, 0.5),
type = "n")
arrows(0, 0, loadings_2pc[,1], loadings_2pc[,2], length = 0.05, col = "blue")
text(loadings_2pc[,1], loadings_2pc[,2], labels = rownames(loadings_2pc),
pos = 3, col = "blue")
# Gráfico de scores para todos los cereales coloreados por fabricante
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"),
col.ind = beisbol$Salary, repel = TRUE, labelsize = 2)
# Gráficos de scores para los 30 cereales mejor representados en las PCs 1 y 2
# coloreados por la estantería y con la elipse de confianza para cada estantería
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"), repel = TRUE, labelsize = 2,
select.ind = list("cos2"=30), habillage = "DivisionE", addEllipses = TRUE)
fviz_pca_biplot(res.pca, axes = c(1,2), labelsize = 3,
label = "var", repel = TRUE,
col.ind = beisbol$LeagueA)
# Gráfico de scores para todos los cereales coloreados por fabricante
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"),
col.ind = beisbol$Salary, repel = TRUE, labelsize = 2)
# Gráfico de scores para todos los cereales coloreados por fabricante
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"),
col.ind = log2(beisbol$Salary), repel = TRUE, labelsize = 2)
# Gráfico de scores para todos los cereales coloreados por fabricante
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"),
col.ind = beisbol$Salary, repel = TRUE, labelsize = 2)
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"),
col.ind = log2(beisbol$Salary), repel = TRUE, labelsize = 2)
# Gráficos de scores para los 30 cereales mejor representados en las PCs 1 y 2
# coloreados por la estantería y con la elipse de confianza para cada estantería
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"), repel = TRUE, labelsize = 2,
select.ind = list("cos2"=30), habillage = "DivisionE", addEllipses = TRUE)
fviz_pca_biplot(res.pca, axes = c(1,2), labelsize = 3,
label = "var", repel = TRUE,
col.ind = beisbol$LeagueA)
# Gráficos de scores para los 30 cereales mejor representados en las PCs 1 y 2
# coloreados por la estantería y con la elipse de confianza para cada estantería
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"), repel = TRUE, labelsize = 2,
select.ind = list("cos2"=30), habillage = "DivisionE", addEllipses = TRUE)
fviz_pca_ind(res.pca, axes = c(1,2), geom = c("point", "text"), repel = TRUE, labelsize = 2,
select.ind = list("cos2"=30), habillage = "LeagueA", addEllipses = TRUE)
View(eig.val)
eig.val
eig.val[,2]
eig.val[]
eig.val[,2]
var_explicada <- eig.val[,2]
qplot(c(1:3), var_explicada)
var_explicada <- eig.val[,2]
qplot(c(1:3), var_explicada) +
geom_line() +
xlab("Componente principal") +
ylab("Varianza explicada (%)") +
ggtitle("Scree plot") +
ylim(0,1)
library(ggplot2)
var_explicada <- eig.val[,2]
qplot(c(1:3), var_explicada) +
geom_line() +
xlab("Componente principal") +
ylab("Varianza explicada (%)") +
ggtitle("Scree plot") +
ylim(0,1)
library(ggplot2)
var_explicada <- eig.val[,2]
qplot(c(1:4), var_explicada) +
geom_line() +
xlab("Componente principal") +
ylab("Varianza explicada (%)") +
ggtitle("Scree plot") +
ylim(0,1)
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:6,])
eig.val <- get_eigenvalue(res.pca)
VPmedio = 100 * (1/nrow(eig.val))
fviz_eig(res.pca, addlabels = TRUE) +
geom_hline(yintercept=VPmedio, linetype=2, color="red")
kable(eig.val[1:6,])
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(cluster)
library(FactoMineR)
library(factoextra)
library(NbClust)
library(clValid)
#descCere = data.frame(descCere, "nutri" = c(rep(0,2), rep(1,9), rep(0,4)))
```
#descCere = data.frame(descCere, "nutri" = c(rep(0,2), rep(1,9), rep(0,4)))
```
beisbol = read.csv("beisbol.csv", row.names = 1, as.is = TRUE)
summary(beisbol)
beisbol = read.csv("beisbol.csv", row.names = 1, as.is = TRUE)
beisbol = read.csv("beisbol.csv", row.names = 1, as.is = TRUE)
tabla = data.frame("variable" = colnames(beisbol),"tipo" = c(rep("numerical", 19),
rep("binary", 6)), stringsAsFactors = FALSE)
rownames(tabla) = tabla$variable
