quantiles
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-19] = scale(trainDatosW[,-19], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-19] = scale(testDatosW[,-19], center = colMeans(trainDatosW[,-19]),
scale = apply(trainDatosW[,-19], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
# Matriz de confusión para test
ajusteTest = predict(modeloTR, testDatosWESC)
caret::confusionMatrix(ajusteTest$class, testDatosW$PlayerLevel)
head(ajusteTest$posterior)
head(ajusteTest$x)  #  z (puntuaciones discriminantes)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
#beisbol2 <- beisbolOG[,-c(7:13)]
summary(beisbol2$PlayerLevel)
quantiles
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-19] = scale(trainDatosW[,-19], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-19] = scale(testDatosW[,-19], center = colMeans(trainDatosW[,-19]),
scale = apply(trainDatosW[,-19], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
# Matriz de confusión para test
ajusteTest = predict(modeloTR, testDatosWESC)
caret::confusionMatrix(ajusteTest$class, testDatosW$PlayerLevel)
head(ajusteTest$posterior)
head(ajusteTest$x)  #  z (puntuaciones discriminantes)
View(beisbol2)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG
summary(beisbol2$PlayerLevel)
quantiles
View(beisbol2)
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-19] = scale(trainDatosW[,-19], center = TRUE, scale = TRUE)
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-26] = scale(trainDatosW[,-26], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-26] = scale(testDatosW[,-26], center = colMeans(trainDatosW[,-26]),
scale = apply(trainDatosW[,-26], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
# Matriz de confusión para test
ajusteTest = predict(modeloTR, testDatosWESC)
caret::confusionMatrix(ajusteTest$class, testDatosW$PlayerLevel)
head(ajusteTest$posterior)
head(ajusteTest$x)  #  z (puntuaciones discriminantes)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG[,-7]
summary(beisbol2$PlayerLevel)
quantiles
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-25] = scale(trainDatosW[,-25], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-25] = scale(testDatosW[,-25], center = colMeans(trainDatosW[,-25]),
scale = apply(trainDatosW[,-25], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
# Matriz de confusión para test
ajusteTest = predict(modeloTR, testDatosWESC)
caret::confusionMatrix(ajusteTest$class, testDatosW$PlayerLevel)
head(ajusteTest$posterior)
head(ajusteTest$x)  #  z (puntuaciones discriminantes)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG[,-7]
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
beisbol2 <- beisbolOG
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
beisbol2["AVG_CHits"] = dbeisbol2f["CHits"] / beisbol2["Years"]
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
beisbol2["AVG_CHits"] = beisbol2["CHits"] / beisbol2["Years"]
beisbol2["AVG_CHmRun"] = beisbol2["CHmRun"] / beisbol2["Years"]
beisbol2["AVG_CRuns"] = beisbol2["CRuns"] / beisbol2["Years"]
beisbol2["AVG_CRBI"] = beisbol2["CRBI"] / beisbol2["Years"]
beisbol2["AVG_CWalks"] = beisbol2["CWalks"] / beisbol2["Years"]
beisbol2 <- beisbolOG
summary(beisbol2)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
beisbol2["AVG_CHits"] = beisbol2["CHits"] / beisbol2["Years"]
beisbol2["AVG_CHmRun"] = beisbol2["CHmRun"] / beisbol2["Years"]
beisbol2["AVG_CRuns"] = beisbol2["CRuns"] / beisbol2["Years"]
beisbol2["AVG_CRBI"] = beisbol2["CRBI"] / beisbol2["Years"]
beisbol2["AVG_CWalks"] = beisbol2["CWalks"] / beisbol2["Years"]
summary(beisbol2)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG
beisbol2["AVG_AtBat"] = beisbol2["CAtBat"] / beisbol2["Years"]
beisbol2["AVG_CHits"] = beisbol2["CHits"] / beisbol2["Years"]
beisbol2["AVG_CHmRun"] = beisbol2["CHmRun"] / beisbol2["Years"]
beisbol2["AVG_CRuns"] = beisbol2["CRuns"] / beisbol2["Years"]
beisbol2["AVG_CRBI"] = beisbol2["CRBI"] / beisbol2["Years"]
beisbol2["AVG_CWalks"] = beisbol2["CWalks"] / beisbol2["Years"]
beisbol2 <- beisbol2[,-c(1:25)]
summary(beisbol2)
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-25] = scale(trainDatosW[,-25], center = TRUE, scale = TRUE)
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-1] = scale(trainDatosW[,-1], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-1] = scale(testDatosW[,-1], center = colMeans(trainDatosW[,-1]),
scale = apply(trainDatosW[,-1], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
# Matriz de confusión para test
ajusteTest = predict(modeloTR, testDatosWESC)
caret::confusionMatrix(ajusteTest$class, testDatosW$PlayerLevel)
head(ajusteTest$posterior)
head(ajusteTest$x)  #  z (puntuaciones discriminantes)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG
beisbol2["DIV_CAtBat"] = beisbol2["AtBat"]/beisbol2["CAtBat"]
beisbol2["DIV_CHits"] = beisbol2["Hits"]/beisbol2["CHits"]
beisbol2["DIV_CHmRun"] = beisbol2["HmRun"]/beisbol2["CHmRun"]
beisbol2["DIV_Cruns"] = beisbol2["Runs"]/beisbol2["CRuns"]
beisbol2["DIV_CRBI"] = beisbol2["RBI"]/beisbol2["CRBI"]
beisbol2["DIV_CWalks"] = beisbol2["Walks"]/beisbol2["CWalks"]
beisbol2 <- beisbol2[,-c(1:25)]
summary(beisbol2)
labels <- c("Rookie", "Junior", "Senior")
quantiles <- quantile(beisbolOG$Years, probs = seq(0,1,1/3))
beisbolOG$PlayerLevel <- cut(beisbolOG$Years, breaks = quantiles, labels = labels, include.lowest = TRUE)
beisbol2 <- beisbolOG
beisbol2["DIV_CAtBat"] = beisbol2["AtBat"]/beisbol2["CAtBat"]
beisbol2["DIV_CHits"] = beisbol2["Hits"]/beisbol2["CHits"]
beisbol2["DIV_CHmRun"] = beisbol2["HmRun"]/beisbol2["CHmRun"]
beisbol2["DIV_CRuns"] = beisbol2["Runs"]/beisbol2["CRuns"]
beisbol2["DIV_CRBI"] = beisbol2["RBI"]/beisbol2["CRBI"]
beisbol2["DIV_CWalks"] = beisbol2["Walks"]/beisbol2["CWalks"]
beisbol2 <- beisbol2[,-c(1:25)]
summary(beisbol2)
set.seed(100)
trainFilas = createDataPartition(beisbol2$PlayerLevel, p=0.8, list=FALSE)
trainDatosW = beisbol2[trainFilas,]
testDatosW = beisbol2[-trainFilas,]
trainDatosWESC = trainDatosW
trainDatosWESC[,-1] = scale(trainDatosW[,-1], center = TRUE, scale = TRUE)
testDatosWESC = testDatosW
testDatosWESC[,-1] = scale(testDatosW[,-1], center = colMeans(trainDatosW[,-1]),
scale = apply(trainDatosW[,-1], 2, sd))
modeloTR = lda(PlayerLevel ~ ., data = trainDatosWESC, CV = FALSE)
modeloTR$prior
modeloTR$means
head(modeloTR$scaling) # coeficientes de la FDL
# Matriz de confusión para entrenamiento
ajusteTR = predict(modeloTR)
caret::confusionMatrix(ajusteTR$class, trainDatosW$PlayerLevel)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# if (!requireNamespace("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("ropls")
library(ropls)
beisbol = read.csv('beisbol.csv', verbose=TRUE)
beisbol = read.csv('beisbol.csv')
View(beisbol)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
library(ropls)
# https://bioconductor.org/packages/release/bioc/vignettes/ropls/inst/doc/ropls-vignette.html
beisbolY = beisbol[,beisbol["Salary"]]
beisbolY = beisbol[,beisbol$Salary]
beisbolY = subset(beisbol, beisbol$Salary)
beisbolY = beisbol["Salary"]
View(beisbolY)
beisbolY = beisbol["Salary"]
beisbolX = beisbol[,-c("Salary")]
beisbolY = beisbol["Salary"]
beisbolX = beisbol[,-c(Salary)]
beisbolY = beisbol["Salary"]
beisbolX = beisbol[,-c(17)]
View(beisbolX)
View(beisbol)
beisbol = read.csv('beisbol.csv')
beisbolY = beisbol["Salary"]
beisbolX = beisbol[,-c(18)]
View(beisbolX)
beisbol = read.csv('beisbol.csv')
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
library(ropls)
library(caret)
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ropls")
library(ropls)
library(caret)
library(lattice)
install.packages("lattice")
library(lattice)
caret
library(MASS)
library(caret)
beisbol = read.csv('beisbol.csv')
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
beisbol = read.csv('beisbol.csv')
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
trainX = trainDatos[,-18]
trainY = trainDatos["Salary"]
View(trainY)
beisbol = read.csv('beisbol.csv')
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
trainX = trainDatos[,-18]
trainY = trainDatos["Salary"]
testX = testDatos[,-18]
testY = testDatos["Salary"]
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = nrow(trainX), scaleC = "standard",
fig.pdfC = "none")
library(lattice)
library(ropls)
library(caret)
library(MASS)
library(ggplot2)
library(pls)
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = nrow(trainX), scaleC = "standard",
fig.pdfC = "none")
View(trainX)
View(beisbol)
class(beisbol)
summary(beisbol)
View(beisbol)
beisbol = read.csv('beisbol.csv', row.names = 1, as.is = TRUE)
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
trainX = trainDatos[,-18]
trainY = trainDatos["Salary"]
testX = testDatos[,-18]
testY = testDatos["Salary"]
beisbol = read.csv('beisbol.csv', row.names = 1, as.is = TRUE)
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
trainX = trainDatos[,-18]
trainY = trainDatos["Salary"]
testX = testDatos[,-18]
testY = testDatos["Salary"]
summary(beisbol)
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = nrow(trainX), scaleC = "standard",
fig.pdfC = "none")
summary(trainY)
View(trainY)
View(trainX)
beisbol = read.csv('beisbol.csv', row.names = 1, as.is = TRUE)
trainFilas = createDataPartition(beisbol$Salary, p=0.8, list=FALSE) # Números de las filas
trainDatos = beisbol[trainFilas,] # Separación de las filas de entrenamiento
testDatos = beisbol[-trainFilas,] # Separación de las filas que no son de entrenamiento (test)
trainX = trainDatos[,-18]
trainY = as.matrix(trainDatos["Salary"])
testX = testDatos[,-18]
testY = testDatos["Salary"]
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = nrow(trainX), scaleC = "standard",
fig.pdfC = "none")
# mypls@summaryDF  # Para recuperar la información que devuelve en pantalla la función opls
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = nrow(trainX), scaleC = "standard",
fig.pdfC = "none")
mypls@summaryDF  # Para recuperar la información que devuelve en pantalla la función opls
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(trainX)); maxNC
myplsC = opls(x = trainX, y = trainY, predI = maxNC, crossvalI = nrow(trainX),
scaleC = "standard", fig.pdfC = "none")
?opls
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = min(dim(trainX)); maxNC
myplsC = opls(x = trainX, y = trainY, predI = 5, crossvalI = nrow(trainX),
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model: Players Salary")
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
#maxNC = min(dim(trainX));
maxNC = 15
myplsC = opls(x = trainX, y = trainY, predI = maxNC, crossvalI = nrow(trainX),
scaleC = "standard", fig.pdfC = "none")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,0.6),
main = "PLS model: Players Salary")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
# mypls@modelDF  ## Para recuperar la información de cada componente
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,1),
main = "PLS model: Players Salary")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", ylim = c(0,1),
main = "PLS model: Players Salary")
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
mypls = opls(x = trainX, y = trainY, predI = 6, crossvalI = nrow(trainX), scaleC = "standard")
# plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
mypls = opls(x = trainX, y = trainY, predI = 5, crossvalI = nrow(trainX), scaleC = "standard")
plot(mypls)  ## Para recuperar los gráficos que la función opls genera por defecto
mypls@vipVn
mypls@coefficientMN  # Coeficientes de regresión (B)
# mypls@scoreMN # scores X (T)
# mypls@loadingMN # loadings X (P)
# mypls@weightMN # weights X (W)
# mypls@weightStarMN # weights X (W*)
# mypls@cMN # weights Y (C)
# mypls@uMN # scores Y (U)
mypls = opls(x = trainX, y = trainY, predI = NA, crossvalI = 10, scaleC = "standard",
fig.pdfC = "none", permI = 30)
## Recordad que para hacer este gráfico necesito obtener el modelo con el número máx de componentes
maxNC = 15
myplsC = opls(x = trainX, y = trainY, predI = maxNC, crossvalI = 10, scaleC = "standard", fig.pdfC = "none")
plot(1:maxNC, myplsC@modelDF$`R2Y(cum)`, type = "o", pch = 16, col = "blue3",
lwd = 2, xlab = "Components", ylab = "", main = "PLS model: Jugadores y Salary", ylim = c(0,1))
lines(1:maxNC, myplsC@modelDF$`Q2(cum)`, type = "o", pch = 16, col = "red3",
lwd = 2)
abline(h = 0.5, col = "red3", lty = 2)
legend("bottomleft", c("R2Y", "Q2"), lwd = 2,
col = c("blue3", "red3"), bty = "n")
myplsC = opls(x = X, y = y, predI = 3, crossvalI = 10, scaleC = "standard", permI = 30)
myplsC = opls(x = trainX, y = trainY, predI = 5, crossvalI = 10, scaleC = "standard", permI = 30)
misScores = myplsC@scoreMN
varT = apply(misScores, 2, var)
miT2 = colSums(t(misScores**2) / varT)
N = nrow(trainX)
A = 3
F95 = A*(N**2 - 1)/(N*(N - A)) * qf(0.95, A, N-A); F95
F99 = A*(N**2 - 1)/(N*(N - A)) * qf(0.99, A, N-A); F99
plot(1:length(miT2), miT2, type = "l", xlab = "cereales", ylab = "T2",
main = "PLS: T2-Hotelling")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
misScores = myplsC@scoreMN
varT = apply(misScores, 2, var)
miT2 = colSums(t(misScores**2) / varT)
N = nrow(trainX)
A = 3
F95 = A*(N**2 - 1)/(N*(N - A)) * qf(0.95, A, N-A); F95
F99 = A*(N**2 - 1)/(N*(N - A)) * qf(0.99, A, N-A); F99
plot(1:length(miT2), miT2, type = "l", xlab = "cereales", ylab = "T2",
main = "PLS: T2-Hotelling")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
misScores = myplsC@scoreMN
varT = apply(misScores, 2, var)
miT2 = colSums(t(misScores**2) / varT)
N = nrow(trainX)
A = 3
F95 = A*(N**2 - 1)/(N*(N - A)) * qf(0.95, A, N-A); F95
F99 = A*(N**2 - 1)/(N*(N - A)) * qf(0.99, A, N-A); F99
plot(1:length(miT2), miT2, type = "l", xlab = "jugadores", ylab = "T2",
main = "PLS: T2-Hotelling")
abline(h = F95, col = "orange", lty = 2, lwd = 2)
abline(h = F99, col = "red3", lty = 2, lwd = 2)
rownames(X)[which(miT2 > F99)]
rownames(trainX)[which(miT2 > F99)]
rownames(trainX)[which(miT2 > F99)]
rownames(trainX)[which(miT2 > F95)]
rownames(trainX)[which(miT2 > F95)]
rownames(trainX)[which(miT2 > F99)]
myT = myplsC@scoreMN
myP = myplsC@loadingMN
myE = scale(trainX) - myT%*%t(myP)
mySCR = rowSums(myE^2)   # SPE
plot(1:length(mySCR), mySCR, type = "l", main = "SCR",
xlab = "cereales", ylim = c(0,18))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
abline(h = chi2lim, col = "orange", lty = 2)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim99, col = "red3", lty = 2)
myT = myplsC@scoreMN
myP = myplsC@loadingMN
myE = scale(trainX) - myT%*%t(myP)
mySCR = rowSums(myE^2)   # SPE
plot(1:length(mySCR), mySCR, type = "l", main = "SCR",
xlab = "cereales", ylim = c(0,18))
g = var(mySCR)/(2*mean(mySCR))
h = (2*mean(mySCR)^2)/var(mySCR)
chi2lim = g*qchisq(0.95, df = h)
abline(h = chi2lim, col = "orange", lty = 2)
chi2lim99 = g*qchisq(0.99, df = h)
abline(h = chi2lim99, col = "red3", lty = 2)
rownames(trainX)[which(mySCR > F99)]
rownames(trainX)[which(mySCR > h)]
rownames(trainX)[which(mySCR > chi2lim99)]
selected = rownames(trainX)[which(miT2 > F99)]
beisbol[,selected]
rownames(beisbol) %in% selected
selected = rownames(trainX)[which(miT2 > F99)]
selected2= rownames(beisbol) %in% selected
beisbol[,selected2]
selected = rownames(trainX)[which(miT2 > F99)]
selected2= rownames(beisbol) %in% selected
beisbol[selected2]
subset(beisbol, selected2)
selected = rownames(trainX)[which(mySCR > chi2lim99)]
selected2= rownames(beisbol) %in% selected
subset(beisbol, selected2)
# t vs u
par(mfrow = c(1,3))
for (i in 1:3) {
plot(myplsC@scoreMN[,i], myplsC@uMN[,i], xlab = "t", ylab = "u",
main = paste0("Component ", i), col = "red3")
}
diag(cor(myplsC@scoreMN, myplsC@uMN))
# t vs u
par(mfrow = c(1,3))
for (i in 1:5) {
plot(myplsC@scoreMN[,i], myplsC@uMN[,i], xlab = "t", ylab = "u",
main = paste0("Component ", i), col = "red3")
}
diag(cor(myplsC@scoreMN, myplsC@uMN))
